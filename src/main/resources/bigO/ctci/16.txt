Exercise #16
************

int powersOf2(int n) {
    if (n < 1) {
        return 0;
    } else if (n == 1) {
        System.out.println(1);
        return 1;
    } else {
        int prev = powersOf2(n / 2);
        int curr = prev * 2;
        System.out.println(curr);
        return curr;
    }
}

Solution
********

Time Complexity:

powerSOf2(18)
    powersOf2(9)
        powersOf2(4)
            powersOf2(2)
                powersOf2(1)
                1
            2
        4
    8
16

=> O(log n)

I think the best explanation for this one is in CTCI book:
"There are log N powers of 2 between 1 and N."

Space Complexity: O(log n)
